class Solution {
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
    
        if(root == null) return null;
        
        if(p == root || q == root) return root; //1st
        
        TreeNode left = lowestCommonAncestor(root.left, p, q); //2nd
        TreeNode right = lowestCommonAncestor(root.right, p, q); //3rd
        
        if(left != null && right != null){ //4th
            return root;
        }
        return (left != null) ? left : right; //5th
    }
}
Input: root = [3,5,1,6,2,0,8,null,null,7,4], p = 5, q = 1
Output: 3
1st : if p = root or q = root, LCA will be the root
     *note that p and q cannot both be the root
2nd : search p and q from the LST, will return p or q if found, otherwise, return null
3rd : search p and q from the RST, will return p or q if found, otherwise, return null
4th : if found p and q from LST and RST, the LCA will be the root
5th : if found both p & q in LST, return left, otherwise, found both p and q in RST, return right
