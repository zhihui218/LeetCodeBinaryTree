class Solution {
    public Node connect(Node root) {
        
        if(root == null) return null;
        
        Node curr = root; //1st
        
        while(curr.left != null){ //2nd
            
            Node nextLevel = curr.left; //3rd
            
            while(curr != null){ //4th
                curr.left.next = curr.right; //5th
                if(curr.next == null){ //6th
                    curr.right.next = null; //7th
                }
                else{
                    curr.right.next = curr.next.left; //8th
                }
                curr = curr.next; /9th
            }
            curr = nextLevel; //10th
        }
        return root;
    }
}
Perfect Binary Tree
Example : root = [1,2,3,4,5,6,7]
        1
     2     3
   4  5   6  7      
Output: [1,#,2,3,#,4,5,6,7,#]
1st : 1
2nd : start work beginning on the second level and onward
3rd : keep track of the beginning of the next level 
      *nextLevel = 2
4th : for each node on this level, populate the next pointer on the next level
      *curr = 1 != null
5th : curr.left.next (2 ->) = curr.right (3)
6th : curr.next == null (1 -> == null)
7th : curr.right.next = null (3 -> == null) *for first iteration
8th : curr.right.next = curr.next.left *for second iteration
      *curr = 2
      *curr.right = 5
      *curr.next = 3
      *after 5 is 6
9th : move to the next node on this level
      *curr.next = null (1 -> null), break inner while loop
10th : move to the next level
       *curr = 2
