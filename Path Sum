/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean hasPathSum(TreeNode root, int targetSum) {
     
        if(root == null){
            return false;
        } 
        else if(root.left == null && root.right == null && targetSum - root.val == 0){ //1st
            return true;
        }
        else{
            return hasPathSum(root.left, targetSum - root.val) || hasPathSum(root.right, targetSum - root.val); //2nd
        }
        
    }
}
1st : First, start from root, we use the targetSum minus the root value, repeat the process for LST and RST until we reach the leaf node of LST and RST and our targetSum equals 0,
      we can conclude that there is a path
2nd : we recursively call the method which every iteration, we will repeat the process which is targetSum minus root value for LST and RST, 
      if there is a path for LST or RST, return true      
