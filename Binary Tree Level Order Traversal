/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        
        
        
        List<List<Integer>> result = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        
        if(root == null) return result;
        
        queue.add(root); //1st
        
        while(!queue.isEmpty()){
            int size = queue.size(); //2nd
            List<Integer> currLevel = new ArrayList<>(); //3rd
            for(int i=0; i<size; i++){ //4th
                TreeNode curr = queue.remove(); 
                currLevel.add(curr.val); //5th
                if(curr.left != null){
                    queue.add(curr.left);
                }
                if(curr.right != null){
                    queue.add(curr.right);
                }
            }
            result.add(currLevel); //6th
        }
        return result;
    }
}

YouTube : https://youtu.be/XZnWETlZZ14
Use queue to print out(remove()) the nodes for each level then store into currLevel(array list), add the currLevel into the result
Queue will hode the treeNode
1st : when we have root, just simply add the root into the queue
2nd : size = total number of nodes we have in a single level
    exp: first iteration : 1 node (root)
         second iteration : 2 nodes (left child & right child of the root)
3rd : for every single level, make a list to store all the nodes values in that current level         
4th : how many nodes we have to process during the current iteration in the for loop? that is i < size
5th : add the node value to currLevel list
6th : add the currLevel list which contains all of the processed nodes into the list of list (result)

Steps for solving BFS
1. create a new queue and result list(list of list)
2. if got root, add root into the queue
3. while loop (queue != empty)
4.  declare and initialise int size = queue.size()
5.  create a new arraylist to store current level node
6.      for loop(i < size)
7.          remove the element store in queue 
8.          add the element into the current level arraylist
9.          check for LST and RST, if not empty, add to the queue
10.     add the current level list into the result list
11. return result
