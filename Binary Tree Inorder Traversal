/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
Method 1 (stack)
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        
        List<Integer> result = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();
        TreeNode curr = root;
        
        while(curr != null || !stack.isEmpty()){
            while(curr != null){ //push the root first follow by left node
                stack.push(curr);
                curr = curr.left;
            }
            curr = stack.pop(); //pop the left node first then root
            result.add(curr.val); //add to result
            curr = curr.right; //let curr = right, repeat the process
        }
        return result;
    }
}

Method 2 (recursive)
class Solution {
    public List<Integer> inorderTraversal(TreeNode root) {
        
        List<Integer> result = new ArrayList<>();
        helper(root, result);
        return result;
    }
    
    public void helper(TreeNode root, List<Integer> result){
        if(root != null){
            if(root.left != null){
                helper(root.left, result);
            }
            result.add(root.val);
            if(root.right != null){
                helper(root.right, result);
            }
        }
    }
}
