/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isSymmetric(TreeNode root) {
        if(root == null) return true;
        
        return isSymmetric(root.left, root.right);
    }
    
    public boolean isSymmetric(TreeNode left, TreeNode right){
        if(left == null || right == null){ //1st
            return left == right;
        }
        if(left.val != right.val){ //2nd
            return false;
        }
        return isSymmetric(left.left, right.right) //3rd
            && isSymmetric(left.right, right.left) ; //4th
    }
}
1st : if LST is null , RST must be null and vice versa
2nd : if the left node not equal to right node, return false 
3rd : compare LST of LST with RST of RST
4th : compare right child of LST with left child of RST
